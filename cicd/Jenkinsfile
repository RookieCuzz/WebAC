pipeline {}
      agent {label 'dockeragent'}

    options {
        // 跳过默认的 SCM 签出（如果你想完全控制 checkout 步骤）
        skipDefaultCheckout()
    }
    environment {
        // 定义环境变量
        APP_NAME = 'webac'
        REGISTRY = 'crpi-vqe38j3xeblrq0n4.cn-hangzhou.personal.cr.aliyuncs.com/spring-mctown'
    }
    
    stages {
        stage('检出代码') {
            steps {


               // 清理工作区（deleteDir 会删除整个工作区）
                deleteDir()
                // 或者使用 cleanWs 插件（如果安装了的话）
                // cleanWs()
                // 然后执行签出
                // 从 Git 仓库检出代码
                checkout scm
            }
        }
        
        stage('Docker 构建与推送') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'aliyun-docker-login',
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh """
                        echo "\$DOCKER_PASSWORD" | docker login --username \$DOCKER_USERNAME --password-stdin ${env.REGISTRY.split('/')[0]}
                    """
                }
                
                script {
                    def imageTag = "${env.REGISTRY}/${env.APP_NAME}:${env.BUILD_NUMBER}"
                    def latestTag = "${env.REGISTRY}/${env.APP_NAME}:latest"
                    
                    sh """
                        ls -l
                        docker build -t ${imageTag} --network=host -f cicd/Dockerfile .
                        docker tag ${imageTag} ${latestTag}
                        docker push ${imageTag}
                        docker push ${latestTag}
                    """
                }
            }
        }
        
        stage('部署开发环境') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    def imageTag = "${env.REGISTRY}/${env.APP_NAME}:${env.BUILD_NUMBER}"
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'aliyun-docker-login',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh """
                            echo "\$DOCKER_PASSWORD" | docker login --username \$DOCKER_USERNAME --password-stdin ${env.REGISTRY.split('/')[0]}
                            docker pull ${imageTag}
                            docker stop ${env.APP_NAME} || true
                            docker rm ${env.APP_NAME} || true
                            docker run -d --name ${env.APP_NAME} \
                            -p 8080:8080 \
                            -e "SPRING_PROFILES_ACTIVE=dev" \
                            ${imageTag}
                        """
                    }
                }
            }
        }
        
        stage('部署测试环境') {
            when {
                branch 'staging'
            }
            steps {
                script {
                    def imageTag = "${env.REGISTRY}/${env.APP_NAME}:${env.BUILD_NUMBER}"
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'aliyun-docker-login',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh """
                            echo "\$DOCKER_PASSWORD" | docker login --username \$DOCKER_USERNAME --password-stdin ${env.REGISTRY.split('/')[0]}
                            docker pull ${imageTag}
                            docker stop ${env.APP_NAME} || true
                            docker rm ${env.APP_NAME} || true
                            docker run -d --name ${env.APP_NAME} \
                            -p 8080:8080 \
                            -e "SPRING_PROFILES_ACTIVE=test" \
                            ${imageTag}
                        """
                    }
                }
            }
        }
        
        stage('部署生产环境') {
            when {
                branch 'main'
            }
            steps {
                // 手动确认部署到生产环境
                input message: '确认部署到生产环境?', ok: '部署'
                
                script {
                    def imageTag = "${env.REGISTRY}/${env.APP_NAME}:${env.BUILD_NUMBER}"
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'aliyun-docker-login',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh """
                            echo "\$DOCKER_PASSWORD" | docker login --username \$DOCKER_USERNAME --password-stdin ${env.REGISTRY.split('/')[0]}
                            docker pull ${imageTag}
                            docker stop ${env.APP_NAME} || true
                            docker rm ${env.APP_NAME} || true
                            docker run -d --name ${env.APP_NAME} \
                            -p 8080:8080 \
                            -e "SPRING_PROFILES_ACTIVE=prod" \
                            ${imageTag}
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "✅ 构建成功！"
        }
        failure {
            echo "🔥 构建失败，请检查日志。"
        }
    }
}
